# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: torrent.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='torrent.proto',
  package='torrent',
  serialized_pb=_b('\n\rtorrent.proto\x12\x07torrent\"5\n\x07Torrent\x12\r\n\x05owner\x18\x01 \x02(\t\x12\r\n\x05\x66name\x18\x02 \x02(\t\x12\x0c\n\x04root\x18\x03 \x02(\t\"E\n\rUploadRequest\x12!\n\x07torrent\x18\x01 \x02(\x0b\x32\x10.torrent.Torrent\x12\x11\n\tsignature\x18\x02 \x01(\t')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_TORRENT = _descriptor.Descriptor(
  name='Torrent',
  full_name='torrent.Torrent',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='owner', full_name='torrent.Torrent.owner', index=0,
      number=1, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='fname', full_name='torrent.Torrent.fname', index=1,
      number=2, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='root', full_name='torrent.Torrent.root', index=2,
      number=3, type=9, cpp_type=9, label=2,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=26,
  serialized_end=79,
)


_UPLOADREQUEST = _descriptor.Descriptor(
  name='UploadRequest',
  full_name='torrent.UploadRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='torrent', full_name='torrent.UploadRequest.torrent', index=0,
      number=1, type=11, cpp_type=10, label=2,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='signature', full_name='torrent.UploadRequest.signature', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=81,
  serialized_end=150,
)

_UPLOADREQUEST.fields_by_name['torrent'].message_type = _TORRENT
DESCRIPTOR.message_types_by_name['Torrent'] = _TORRENT
DESCRIPTOR.message_types_by_name['UploadRequest'] = _UPLOADREQUEST

Torrent = _reflection.GeneratedProtocolMessageType('Torrent', (_message.Message,), dict(
  DESCRIPTOR = _TORRENT,
  __module__ = 'torrent_pb2'
  # @@protoc_insertion_point(class_scope:torrent.Torrent)
  ))
_sym_db.RegisterMessage(Torrent)

UploadRequest = _reflection.GeneratedProtocolMessageType('UploadRequest', (_message.Message,), dict(
  DESCRIPTOR = _UPLOADREQUEST,
  __module__ = 'torrent_pb2'
  # @@protoc_insertion_point(class_scope:torrent.UploadRequest)
  ))
_sym_db.RegisterMessage(UploadRequest)


# @@protoc_insertion_point(module_scope)
